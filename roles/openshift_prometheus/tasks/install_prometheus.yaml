---

# namespace
- name: Add prometheus project
  oc_project:
    state: "{{ state }}"
    name: "{{ openshift_prometheus_namespace }}"
    description: Prometheus

# secrets
- name: Set alert and prometheus secrets
  oc_secret:
    state: "{{ state }}"
    name: "{{ item }}-proxy"
    namespace: "{{ openshift_prometheus_namespace }}"
    contents:
      - path: session_secret
        data: "{{ 43 | oo_random_word }}="
  with_items:
    - prometheus
    - alerts

# serviceaccount
- name: create prometheus serviceaccount
  oc_serviceaccount:
    state: "{{ state }}"
    name: prometheus
    namespace: "{{ openshift_prometheus_namespace }}"
#    TODO add annotations when supproted
#    annotations:
#      serviceaccounts.openshift.io/oauth-redirectreference.primary: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"{{item.name}}"}}'
    secrets:
    - prometheus-secrets
  changed_when: no

# create clusterrolebinding for prometheus serviceaccount
- name: Set cluster-reader permissions for prometheus
  oc_adm_policy_user:
    state: "{{ state }}"
    namespace: "{{ openshift_prometheus_namespace }}"
    resource_kind: cluster-role
    resource_name: cluster-reader
    user: "system:serviceaccount:{{ openshift_prometheus_namespace }}:prometheus"

# create prometheus and alerts services
# TODO join into 1 task with loop
- name: Create prometheus service
  oc_service:
    state: "{{ state }}"
    name: "{{ item.name }}"
    namespace: "{{ openshift_prometheus_namespace }}"
    selector:
      app: prometheus
    labels:
      name: "{{ item.name }}"
#    TODO add annotations when supported
#    annotations:
#      service.alpha.openshift.io/serving-cert-secret-name: "{{item.name}}-tls"
    ports:
    - port: 443
      targetPort: 8443
  with_items:
    - name: "prometheus"

- name: Create alerts service
  oc_service:
    state: "{{ state }}"
    name: "{{ item.name }}"
    namespace: "{{ openshift_prometheus_namespace }}"
    selector:
      app: prometheus
    labels:
      name: "{{ item.name }}"
#    TODO add annotations when supported
#    annotations:
#      service.alpha.openshift.io/serving-cert-secret-name: "{{item.name}}-tls"
    ports:
    - port: 443
      targetPort: 9443
  with_items:
    - name: "alerts"

# create prometheus and alerts routes
- name: create prometheus and alerts routes
  oc_route:
    state: "{{ state }}"
    name: "{{ item.name }}"
    namespace: "{{ openshift_prometheus_namespace }}"
    service_name: "{{ item.name }}"
    tls_termination: reencrypt
  with_items:
    - name: prometheus
    - name: alerts

# create prometheus deployment
- name: Set prometheus deployment template
  template:
    src: prometheus_deployment.j2
    dest: "{{ tempdir }}/templates/prometheus.yaml"
  vars:
    namespace: "{{ openshift_prometheus_namespace }}"
    replicas: "{{ openshift_prometheus_replicas }}"

- name: Set prometheus deployment
  oc_obj:
    state: "{{ state }}"
    name: "prometheus"
    namespace: "{{ openshift_prometheus_namespace }}"
    kind: deployment
    files:
    - "{{ tempdir }}/templates/prometheus.yaml"
    delete_after: true

# prometheus configmap
- template:
    src: prometheus.yml.j2
    dest: "{{ tempdir }}/prometheus.yml"
  changed_when: no

- template:
    src: prometheus.rules.j2
    dest: "{{ tempdir }}/prometheus.rules"
  changed_when: no

- name: Set prometheus configmap
  oc_configmap:
    state: "{{ state }}"
    name: "prometheus"
    namespace: "{{ openshift_prometheus_namespace }}"
    from_file:
      prometheus.rules: "{{ tempdir }}/prometheus.rules"
      prometheus.yml: "{{ tempdir }}/prometheus.yml"

# alertmanager configmap
- template:
    src: alertmanager.yml.j2
    dest: "{{ tempdir }}/alertmanager.yml"
  changed_when: no

- name: Set alertmanager configmap
  oc_configmap:
    state: "{{ state }}"
    name: "alertmanager"
    namespace: "{{ openshift_prometheus_namespace }}"
    from_file:
      alertmanager.yml: "{{ tempdir }}/alertmanager.yml"
